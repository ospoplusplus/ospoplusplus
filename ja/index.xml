<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>InnerSource Commons</title><link>http://anexample.org/ja/</link><description>Recent content on InnerSource Commons</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://anexample.org/ja/index.xml" rel="self" type="application/rss+xml"/><item><title>Trusted Committerの役割の紹介</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/01/</guid><description>Trusted Committer(TC)の役割は、InnerSourceコミュニティにおける重要な役割の1つです。 Trusted Committerは、重要な技術的決定や、最終的にコントリビューションをゴールまで導くためにコントリビューターのメンタリングを行う、あなたが信頼するコミュニティの人々だと考えてください。 Trusted Committerの役割は、要求が厳しくやりがいがあるものです。 それは単なる独断的なゲートキーパー以上のもので、あらゆるInnerSourceコミュニティの成功に役立ちます。
一般的に、Trusted Committerの役割は、権限ではなく責任によって定義されます。 非常に高いレベルでは、Trusted Committer達はInnerSourceコミュニティと、コミュニティが構築している製品の両方の利益を代表しています。 彼らはコミュニティと製品の両方の健全性に関心があります。 したがって、Trusted Committerとしては、技術指向とコミュニティ指向の両方の責任があります。 次のセクションでは、これらの両方の側面について説明します。</description></item><item><title>はじめに</title><link>http://anexample.org/ja/learn/learning-path/contributor/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/contributor/01/</guid><description>InnerSourceのコントリビューター あなたは、あなたの依存する機能を他チームがシステムに追加をする時間が無いために、次のコーディングタスクをブロックされたことはありませんか？ もしかすると、しばらくしてから、その不足している機能を補うために、あなたのプロジェクトで余計な作業をしなければならなかったかも知れません。 このような形で全くブロックされないことは、どんなに素晴らしいことでしょうか？
InnerSourceの原則を組み込んだプロジェクトでは、必要な機能を他のチームが提供するのを待ってブロックされることは決してありません。 もし必要なものが得られないなら、InnerSourceコントリビューターとして行動し、他チームのコードリポジトリに直接あなたが必要な変更を行うことかできます。
コントリビューターの役割は、InnerSourceコミュニティプロジェクトのリポジトリに貢献する人と表されます。 この人はコミュニティの一部の人であるかも知れないし、そうでないかも知れません。 しかし、かなりの数の人にとってコントリビューターとは、単にコミュニティについて知るだけのことから、コミュニティのプロダクトを使用し、コミュニティのメンバーと対話し、そして最終的に貢献を始めることができるという旅のようなものです。 最終的に、そのうち何人かは Trusted Committer(トラステッドコミッター) になるかも知れません。
他の役割との関係 InnerSourceコミュニティにおけるコントリビューターとしてあなたは、 Trusted Committer や Product Owner (プロダクトオーナー) などのInnerSourceの他の役割を担っている人や、おそらく他のコントリビューターとも交流することになります。 まれに、小さな草の根スタイルのプロジェクトでは、Trusted Committerとプロダクトオーナーなどの役割は同じ人が行うことができます。</description></item><item><title>はじめに</title><link>http://anexample.org/ja/learn/learning-path/introduction/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/introduction/01/</guid><description>このラーニングパスは、InnerSourceの紹介にあたるものです。 InnerSourceは、企業内のソフトウェア開発にオープンソースの実践と原則を適用したものです。 InnerSourceソフトウェアは、会社としてはプロプライエタリなものとなりますが、内部にはオープンで、誰もが利用したり貢献したりできるようになります。 この方法は、広範かつ効果的なコラボレーション、内部の多くのステークホルダーからの変化する要求に、迅速かつ軽快に対応することを可能とします。
このラーニングパスでは、InnerSourceを適用する良い候補となる状況を、どのように認識するかについて学びます。 私たちは、これらの状況でどのようにInnerSourceが活用できるか概略を示します。 それにより、あなたはInnerSourceについて議論する際の共通用語に詳しくなるでしょう。 私たちはまた、InnsrSourceの基礎となる主要な原則と、それが効果的に適用された時に得られる効果を列挙します。</description></item><item><title>はじめに</title><link>http://anexample.org/ja/learn/learning-path/product-owner/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/product-owner/01/</guid><description>こんにちは、中間管理職やプロダクトオーナー、プログラムマネージャーの皆さん。 もっと幸せで効果的なチームをリードしたいと思いますか？ 報告地獄に閉じ込められた記録係よりもリーダーになりたいですか？ 私の会社にInnerSourceのプロセスを導入したことで、約80%が割り込み駆動型開発だった複数の大規模システムのリファクタリングをすることができました。 そして私たちは皆、その環境を管理すること、ましてや開発することが、いかに難しいかを知っています。
InnerSourceプロセスを通じて、私たちは数十年積み残していた内部残件を1年足らずで削減もしました。 InnerSouceの重要な要素はオープンであることです。 これは、ほとんどの企業のチームが陥っているサイロ化を破壊します。 これを実現可能にして、数え切れない管理や開発者の時間を節約する、基本的なInnerSourceの手法について説明します。
こんにちは。Sliona Bonewald です。PayPalでディレクターをしています。 InnerSourceプロセスでは、40以上のチームと1500人以上のスタッフのトレーニングに成功しました。 また、InnerSourceコモンズにも参加して定期的に講演しています。 是非ご参加ください。 innersourcecommons.</description></item><item><title>InnerSourceコントリビューターになる</title><link>http://anexample.org/ja/learn/learning-path/contributor/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/contributor/02/</guid><description>InnerSourceのコントリビューターは、通常のチームの境界外で活動し、組織のサイロを横断するリンクになります。 そのため、彼らはこの作業をより効果あるものにするための、いくつかの共通の方法を意識する必要があります。
マインドセットの共有 それでは - あなたはチームの製品に、新しい機能を実装しています。 この機能を動作させるためには、いくつかの機能が必要です。 実装に直ぐに取り掛かる代わりに、少し落ち着いて考えます：この機能は一般的な課題なのだろうか？ それは、あなたの組織の他のチームが共有するビジネスドメインで同じように直面しているものなのか？ この機能は、あなたのプロジェクトのドメインと直交するものなのか？ もし当てはまる場合、自分のチームを超えて見渡して：あなたのニーズにフィットするために利用したり改善できる共通のソリューションがあるのか？ あるべきなのか？
ソリューションを共有するメリット アフリカには、 &amp;#8220;早く行きたいなら一人で行きなさい。遠くに行きたいなら一緒に行きなさい&amp;#8221;　という諺があります。これは、ソフトウェア開発チームにも同じです。</description></item><item><title>InnerSourceによって解決される課題とは？</title><link>http://anexample.org/ja/learn/learning-path/introduction/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/introduction/02/</guid><description>InnerSourceは、企業の組織構造やその立場に関係なく、誰もがコードを再利用したりコラボレーションすることを推奨し、それに報いることができるものです。 このアプローチは、従来の組織に見られるアイデアや成果物を企業組織の階層やサイロの中に閉じ込めておくものとは異なるものです。 この考えについて実例をあげて見ていきましょう。
同じ会社にある二つのチームが、別々のソフトウェア部品を提供する時、片方のチームのソフトウェアが、もう一方のチームのソフトウェアに依存する状況を想像してください。 もう少し具体的にユーザエクスペリエンスを例にすると、表示用データを取得するAPIに依存するサービスがあります。 このような状況は、一つのチームが作成するソフトウェアが、数十人、数百人の利用される大企業では一般的なことです。
利用側のチームが多くの機能を必要とした時、提供側のチームは通常、どの機能から開発を進めるかを決めるために、ある種の要件や優先度付けを行うプロセスを持っています。 すぐに作業に取り掛かるため優先度が付けられていなかった重要な機能のリクエストのために、利用側のチームは通常、次に示す3つのオプションから一つを選択することになると思いますが、それぞれ欠点があります。
静観： 利用側のチームは何もせずにリスエストされた機能が無いために足を引っ張られるかもしれません。 このオプションは、利用側の作業を最小限にすることができます。 機能リクエストの効果に依存しているかもしれませんが、もしかすると待つだけで良いかもしれません。 しかし、これは苦痛を伴うかもしれません。要求された機能がいつまでたっても提供されない場合は、特に大きな苦痛を伴います。
回避策： 利用側のチームが待ちたくない時は、利用側が要求する機能が足りない部分を補うために、別の場所で追加作業をするかもしれません。 この追加作業は、利用側のプロジェクトの変更となるかもしれません。 あるいは、利用側のチームは彼らのニーズを満たし、開発チームの全部もしくは一部の仕様を置き換える新しいプロジェクトを作成するかもしれません（コード/プロジェクトの複製）。 こうした方法は、利用側のチームが要求する機能を自分たちの努力だけで手に入れることができます。とはいえ、これには幾つかの欠点があります。</description></item><item><title>製品品質の確保</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/02/</guid><description>まず、Trusted Committerの役割に最もよく関連する責任、製品の品質を確保することから始めましょう。
InnerSourceのコミュニティでTrusted Committerたちは、すべての技術関連の意思決定、特に製品品質に関する意思決定の 権利を持っています 。 権利を持つということは、適切な決定が確実に実行されるようにする必要があるということを意味します。 これには、コミュニティ内外で意思疎通を図り、必要に応じてこれらの決定を支持することが含まれます。 しかし、Trusted Committerは、必ずしも技術関連の決定をすべて自分で行ったり、それを実装するためのすべての作業を行うわけではありません。
Trusted Committerの仕事は、彼らのコミュニティの品質基準を伝え、明確にし、 コントリビューター が理解でき、実行可能な形にそれらを策定することです。 これにはもちろん書面による文書も含まれますが、Trusted Committerがこれらの品質基準を伝える最も効果的な方法は、例示によるものです。 私たちは、InnerSourceコミュニティが開発をまとめる方法だけでなく、彼らが作成するソフトウェアの品質においても、従来のソフトウェア開発プロジェクトと差別化を図ることは価値ある目標であると考えています。 ソフトウェア品質の高さは、InnerSourceコミュニティのユーザとその管理者の信頼を確立し維持するために不可欠なものです。 私たちは皆、1つの悪いリリースが、この信頼を一瞬にして打ち砕いてしまうことを知っています。</description></item><item><title>中間管理職でいることの難しさ</title><link>http://anexample.org/ja/learn/learning-path/product-owner/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/product-owner/02/</guid><description>まずは、プロダクトオーナーや中間管理職の人に話を聞いてみることから始めましょう。 ツライですね、統計からもわかります。 Googleで"中間管理職"と検索してみても、ほとんどの結果はそれが如何に大変かについてです。
これが統計情報になります。 中間管理職の皆さんは、上司や部下よりもうつ病や不安を抱えている割合が高いです。 半数以上が常に不安を感じていると言うことです。 Harvard Business Reviewが32万人以上の従業員を対象に実施した調査によると、中間管理職の仕事の満足度は下位5%だということが明らかになりました。痛い！
私が見つけた共通の不満を意訳すると、中間管理職は上層部のビジョン作成には関わらず、責任を取らされることがよくあります。 リーダーシップ能力を必要とする人にとって、これほどモチベーションが下がるものを思いつきません。
いくつかの調査を読んでわかった不満のトップ5は、次の通りです。
最初は、混沌と機能不全に陥ったプロダクトチームを引き継ぐことです。
2番目は、柔軟性がなく、創造性を発揮する余地がほとんどないことです。多くの場合、これには明確な道筋が含まれていません。</description></item><item><title>InnerSourceのプロセスに組込まれている主なメリット</title><link>http://anexample.org/ja/learn/learning-path/product-owner/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/product-owner/03/</guid><description>InnerSourceコモンズ では、オープンソースで学んだ オープン の概念について説明し、また、企業の中で私たちが知っていることや学んだことを再利用する方法について説明します。 それでは、マネージャーの視点からいくつか順を追っていきましょう。ディレクターとして、そしてPayPalではプロダクトオーナーと呼ぶプロダクトマネージャーとして、私にどのようなメリットをもたらしたかを説明します。
最初は、 オープンコード です。 オープンコードとは、何でしょうか？基本的には、コードが企業全体から見えるということ、そして、他の開発者が他のコードベースにプルリクエストを送信して受け入れるプロセスがあるということです。 さらに理解を深めるために、詳細については Trusted Committer と、コントリビューションアグリーメントに関する記事を参照してください。
マネージャーにとってのオープンコードとは、他チームのコードベースでバグ修正や機能実装されるのを待ったり、エスカレーションしたりする必要がなくなることを意味しています。 実装や計画を、より効果的に始めることができます。 多くの場合、あなたのチームの問題(または機能)は、他チームの最優先事項ではないかもしれません。 そのチームにアクセスするために、上層部へのエスカレーションや政治に頼る必要はもうありません。 代わりに、あなたのチームで優先順位を決定し、他者への依存を減らすことができる、より多くの力を手に入れます。 知識の習得までに、より時間がかかる場合もあります。しかし、それが常にボトルネックとなっているチームでは、何年も放置されているストーリーを、他チームのバックログから取り出すことができます。</description></item><item><title>コミュニティの健全性維持</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/03/</guid><description>本章の導入で Trusted Committerには技術指向とコミュニティ指向の両方の責任があることを指摘しました。 それは、コードとコードの健全性だけに注目するだけでは不十分だということです。 長期的な成功を確実にするために、Trusted Committerはソフトウェアを構築するコミュニティの健全性維持にも努めるべきです。 そのためには、製品の品質を確保することと健全なコミュニティを育てることの間で、バランスを取る必要があります。
健全なコミュニティとはどのようなものでしょうか？ 簡単に言うと、健全なコミュニティでは、 コントリビューター はソフトウェア開発にほとんどの時間を費やすことができ、能力を高めることができます。 その結果、健全なコミュニティは、継続して成長することになります。
なぜ、 コントリビューター はコミュニティに参加して留まるのでしょうか？ コミュニティの目的や使命に賛同しているため、そうする人達がいます。 この目的を明確にして推進することが、Trusted Committerの仕事です。 この重要性は、認識されていないことが多いが、コミュニティとそのプロダクトをマーケティングすることは本当に重要です。</description></item><item><title>コントリビューターの心構え</title><link>http://anexample.org/ja/learn/learning-path/contributor/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/contributor/03/</guid><description>前のセグメントでは、あなたがコンポーネントを再利用してコントリビューターとして活動するようになるかの理由を説明しました。 この記事では、ホストチームのコードベースにあなたの変更をうまく提供する方法のベストプラクティスを共有します。
ホストチームに貢献しようとしているInnerSouceのコントリビューターは、基本的には彼らの家のゲストです。 一般的に、良いゲストは決められた方法で行動することが期待されています。
ドアをノックする
ハウスルールを予測して従う
家のオーナーではないことを理解し、それに応じた行動をする
これらの期待は、どのようにInnerSourceのプロジェクトに適用されるのでしょうか？
入る 隣人を訪ねるとき、たとえドアが開いていても、ノックしたりドアベルを鳴らしたりせずに彼らの家に入ることはないでしょう。 同様に、InnerSourceにおいても、訪問者としてどのコードリポジトリに対しても直接コミットすることはできません（または招待されません）。
代わりに、コードベースに変更を加えた後、それらをプルリクエストとして送信します。 大規模な変更を行うことや、隣人の家の改善を考えたりしないのと同様に、InnerSourceではプロジェクトのコラボレーション・ガイドラインを予測し、それに従うことになります。 今度は、ホストがあなたに方法を示します - InnerSourceでは、既存のTrusted Committer達がゲストを指導するために時間を費やしていることと解釈します。</description></item><item><title>どのようにInnerSourceは機能するのか？</title><link>http://anexample.org/ja/learn/learning-path/introduction/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/introduction/03/</guid><description>AチームがBチームから提供されるソフトウェアを利用する場合を例に考えてみましょう。 AチームはBチームに機能追加のリクエストを送ります、でもBチームはそれを期限内に実装してAチームにリリースすることはできません。 InnerSourceでは、もしAチームがこの要求機能を得ることができない場合、代わりにプルリクエストを送信します。 それは、AチームはBチームのソフトウェアに直接機能を実装してプルリクエストを送付することを意味します。 チームBは連携して送付されたコードをレビューして受け入れます。
この例において、チームAは ゲスト チーム、チームBは ホスト チームと呼ばれます。 ゲスト や ホスト の用語は、自宅にお客を招くような感覚で使われています。 この状況では、殆どの人は良いホストとなること期待しています。 彼らはゲストの到着を見越して、物事が整理整頓されていることを保証します。 訪問者は、ドアのところで迎えられて中に招かれます。</description></item><item><title>InnerSourceの効果とは？</title><link>http://anexample.org/ja/learn/learning-path/introduction/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/introduction/04/</guid><description>InnerSourceによるコラボレーションには、多くの効果があります。 InnerSourceは、ゲストチームが長期メンテナンスの負担をせず、 彼らが必要な時に機能要求を手に入れる ためのスケーラブルな戦略を企業に提供します。 ゲストチームの時間を、他の人たちが利用できるコードに投入することが、会社全体としての勝利へとつながります。
この結果はInnerSoueceの優れた効果であると同時に、定常的にInnerSourceのコントリビューションを受け取るホストにも多くの効果があります。 InnerSourceのプロセスの一部には、ホストチームのプロダクトオーナーが、コントリビューションされた機能が正しくかつ望まれたものであることに、最初から同意していることを思い出してください。 InnerSourceは、それを利用する人達のために 良いプロダクトを作るための支援 をホストチームが受け取ることを可能にします!
InnerSourceはホストチームにスケーラブルな戦略を提供し 、多くの利用者たちからの、さまざまな機能要求に応えてゆくことが可能となります。 ホストチームのフルタイムメンバーの対応力が固定されているとした場合、時として、その利用者たちのビジネスロードマップの組み合せが、ホストチームの製品で非常に（または理不尽に）大量の作業を必要とすることにつながる可能性があります。 InnerSourceなしでは、こうした状況は、リーダーにエスカレーションされた多くの機能要求に対処する、過労とストレスに満ちたチームを簡単に生みだすことにつながります。</description></item><item><title>コミュニティメンバーのレベル向上</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/04/</guid><description>InnerSourceコミュニティへの参加には連続性があります。 コミュニティについて知らない人達がいます。 新規参加者 は、コミュニティとその製品に関心があるかもしれませんが、まだそれを使用していません。 消費者 は、ソフトウェアを使用しますが、コントリビューションしていない可能性があります。 次に、少なくとも一つはコントリビューションをしている コントリビューター がおり、最後にソフトウェアとコミュニティの両方に責任を持つ_Trusted Committer_ がいます。 Trusted Committerとしては、この連続性に沿う形で個人を動かし、コントリビューションする能力を高めていく責任があります。 この意味で、Trusted Committerは、コミュニティにおけるフォースマルチプライヤーとして機能します。</description></item><item><title>コントリビューションの仕組み</title><link>http://anexample.org/ja/learn/learning-path/contributor/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/contributor/04/</guid><description>他のチームのプロジェクト/リポジトリに貢献を始める準備はできていますか？ マネージメント層へのエスカレーションではなく、コラボレーションでブロッカーを減らすことを楽しみにしていますか？ このセクションでは、InnerSourceに貢献する際に覚えておくべき落とし穴に焦点を当て、実践的なアドバイスを提供します。 これにより、あなたとホストチームが可能な限り快適な経験をすることを可能とし、より多くのコントリビューションと素晴らしいコラボレーションをするための基礎を築きます。
この記事は、あなたがおそらく経験する次の3つのステップに分かれています。
コントリビューションの機会を求め、それに取り組む準備をする
実際にコントリビューションするものを作成する
ギフトをキレイにして包み、ホストチームに提供する
もし、あなたの貢献がより大きければ、共通の目標に向かって反復しながら、これらのステップ（の一部）を繰り返し実行する可能性があります。 そうすることで、すべてのことがより自然に感じられるようになる可能性が非常に高くなるでしょうし、おそらく、以前に何か他のことをしていた理由を不思議に思うかもしれません。
取り組む準備をする リードタイム 一つの重要な違いは、ターンアラウンドタイムです。 初めてコントリビューションする時はいつも、あなたは新しい（ホスト）チームに参加する事になります。 その結果、あなたは彼らのコードベース、使用している技術、そして彼らの好む開発環境（テストフレームワークやビルドシステムを想像してください）について知る必要があります。 この種のツールが標準化されている場合でも、各チームはいくらかの個性があります。 技術的な側面に加えて、コミュニケーション方法の違いに直面することもあるかもしれません（コードレビューを想像してください）。 しばらくして戻ってきたときには、チームのやり方やメンバーが変わっているかも知れません。 しばらく会っていなかった友人を訪ねてキャッチアップする時と同じように時間をかけてください。</description></item><item><title>新しい役割と責任</title><link>http://anexample.org/ja/learn/learning-path/product-owner/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/product-owner/04/</guid><description>InnerSourceのリーダーには、新しい役割と責任が伴います。 その最初の1つが、TCをサポートすることです。TCは、 Trusted Committer です。 あなたが最初に行うことの1つは、おそらく、TCが誰になるかの選抜を支援し、彼らの仕事をサポートすることです。 もし、TCの役割について詳しく知りたければ、 Trusted Committer の章を参照してください。
彼らは、あなたのコードベースのゲートキーパーです。 通常、彼らはコードレビューを得意とし、コードベースのアーキテクチャを深く理解しているリード開発者です。 彼らにはあなたのサポートが必要です。 他チームとのコラボレーションにおいても、彼らは重要です。 見積りやインテグレーションでは、あなたの右腕となるでしょう。彼らをサポートするのを忘れないでください。 彼らにはいくつかとても大変な新しい責任があり、 コントリビューションするチーム を支援するために指導が必要になるかもしれません。 開発者が交渉方法を教えられることはあまりありません。 私は、 Getting to Yes という本を、彼らと一緒に使うことをお勧めします。</description></item><item><title>InnerSourceのコントリビューターになるメリット</title><link>http://anexample.org/ja/learn/learning-path/contributor/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/contributor/05/</guid><description>コントリビューターはInnerSourceプロジェクトの生命線です。 InnerSourceプロジェクトとして実行されるすべてのプロジェクトには、開発チームを当初の創設者の枠を超えて拡大し、そのプロジェクトのユーザー（時に企業では顧客とも呼ばれる）間でさらなる協力者の可能性を利用するという見込みと究極の目標の両方があります。
しかし、個々の開発者がマネージャの指示を受けていないプロジェクトに対して時間を費やす動機は何でしょうか？ マネージャが、開発者に対して100%自分の管理下にないプロジェクトの改善に時間を作る動機となるものは何でしょうか？
個人の動機 最も自明な動機は、初期のコントリビューターをオープンソースに引き込むことです。
あなたが長い間回避してきた迷惑なバグを覚えていますか？ これらの回避策のメンテナンスに費やす時間とエネルギーは？ アップストリームチームが将来その問題を修正するのを待たずに、先に自分で問題を修正できるとしたらどうでしょうか？ この「自分の手で問題を解決する」状況が初めてのコントリビューターは、自分のコードベースの回避策の数を減らすために、日々の作業に依存するプロジェクトの問題を修正することから始めることがよくあります。
独自の回避策を維持するのではなく、修正を作成してコントリビューションするかどうかを決めるときには、そのコントリビューションが独自の変更の品質にもたらすメリットについて考えてください。 単独で作業する代わりに、アップストリームプロジェクトで作業する人は、あなたのソリューションをレビューするだけでなく改善することもできます。 サポートと指導を受けることで、開発作業が大幅にスピードアップします。
他の人と多くの時間を過ごすことは、時間が経つにつれて、チームがどのように機能するか、どのように組織化されるか、どのようなツールを用いてプロジェクトを構築しているかを学ぶことを意味します。 新しいライブラリやビルドシステムについて読むだけではなく、それを自分のプロジェクトに導入する前に実践的な経験を積むことができるので、多くの場合、あなた自身のプロジェクトもその経験から恩恵を受けることになるでしょう。 複数のコアプロジェクトに取り組むことは、課題に対するベストプラクティスとソリューションを引き出す、より大きなエコシステムに晒されることを意味します。</description></item><item><title>InnerSourceの原則</title><link>http://anexample.org/ja/learn/learning-path/introduction/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/introduction/05/</guid><description>会社、チーム、プロジェクト、そして個人はそれぞれ異ります。 ですので、InnerSoueceのコンセプトが実際に機能する正しい方法は、ある状況と他の状況とで異なるものになるでしょう。 しかし、InnerSouceの成功例の根底には4つの原則があります。 これらの原則は、オープンソースプロジェクトの成功からインスピレーションを得ており、InnerSourceが前に説明したような効果を得るために必要なものです。
これらの原則は次の通りです：
オープン性
透明性
優先的なメンターシップ
自発的なコードコントリビューション
それでは、それぞれの原則について詳細を見ていきましょう。
オープン性 オープンなプロジェクトを構成することで、摩擦のないコントリビューションが可能となります。 プロジェクトは、リポジトリのトップに置かれる README.md ファイルと CONTRIBUTING.</description></item><item><title>参入障壁を下げる</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/05/</guid><description>InnerSourceコミュニティでコントリビューションを求めることは、いくつかの理由からオープンソースコミュニティよりも困難です。
InnerSourceコミュニティでは、潜在的な コントリビューター の数が少ない。
コントリビューターは、勤務時間内にコントリビューションしたいと考えるため、時間の制約が大きくなる。
InnerSourceでの作業は、コントリビューターの正式な目標管理の一部に必ずなるとは限らないため、InnerSourceの作業に費やす時間が目標達成を損なうように見える場合がある。
そのため、Trusted Committerにとって、 コントリビューター のオンボーディングやコントリビューション作成のプロセスを、できるだけスムーズにすることが重要となります。 役立つことがいくつかあります。
各コードリポジトリに、適切な README.md を用意する。 適切な README.</description></item><item><title>要約と要点</title><link>http://anexample.org/ja/learn/learning-path/product-owner/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/product-owner/05/</guid><description>この記事で説明した内容をまとめるために、簡単な振り返りをしたいと思います。
まずは、労りましょう。中間管理職は大変です。
私たちが話した主なメリットのいくつかについても説明していきます。 私たちは、InnerSourceがボトルネックを取り除くのにどのように役立つかについて、さまざまな方法を話しました。 また、中間管理職になることで、より多くの責任とより多くの統制力を得る方法について話しました。
また、同僚とより多くコラボレーションすることで、より少ないリソースでより多くの成果を達成でき、その結果、こうした冗長性に実際に対処することができます。 オープンプロセスは、おそらく以前得ていたよりも多くの信用を、あなたの仕事に与えることを意味しています。 これらの計画プロセスを実行して公開することで、すべてがより明確になるため、政治的問題を少なくすることができます。
そして最後に、新しい Trusted Committer をサポートするなどの新しい役割と責任があります。 彼らは、本当にあなたの助けを必要とするでしょう。 また、他のプロダクトオーナーと協力することで、より多くの作業をより短期間で行うことができます。 新しいドキュメントに関しては多くの時間を費やす必要がありますが、それでも大丈夫です。なぜなら、より多くの信用を得られるからです。</description></item><item><title>おわりに</title><link>http://anexample.org/ja/learn/learning-path/contributor/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/contributor/06/</guid><description>InnerSourceラーニングパス、コントリビューターセグメントをご覧いただきありがとうございます。 このセクションでは、InnerSourceプロジェクトの生命線となる、コントリビューターの役割について学びました。 コントリビューターは、コンポーネント所有者の外側にあり、プロジェクトに追加の貴重な情報をもたらします。
このセクションでは、コントリビューションする機会を見つけてコントリビューターになる方法について学びました。 そのような機会を見つけたり作ったりするのに必要な考え方や習慣について見直しました。 また、その役割の心構えと、コントリビューションを成功に導く可能性のあるアプローチについても説明しました。
正しい考え方や、習慣、心構えをしていても、コントリビューションの成功を妨げるものがいくつかあります。そのため、それらの要点について、詳細を説明しました。
最後に、あなたのチームメイトや組織のさまざまなレベルを説得することが難しい場合があるため、このプロセスを簡単にするために、さまざまな観点からコントリビューションのメリットを詳細に説明しました。
あなたが記事を読んだりビデオを見たりすることを楽しみ、InnerSourceと良いコントリビューターになることに向けた旅のために、興味深く新しい洞察をいくつか得ることができることを願っています。
もし、まだそうしていない場合は、InnerSourceラーニングパス( http://innersourcecommons.org/learningpath/ )で、InnerSouceの他の側面ついて、さらに学ぶことをお勧めします。
オンラインのInnerSourceグループ InnerSourceコモンズ をチェックすることをお勧めします。自由に議論に参加して、あなたの組織で学んだり経験したことを共有してください。</description></item><item><title>おわりに</title><link>http://anexample.org/ja/learn/learning-path/introduction/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/introduction/06/</guid><description>このラーニングパスでは、InnerSourceの紹介をしました。 InnerSourceは、企業内のソフトウェア開発にオープンソースのベストプラクティスと原則を適用したものです。 これは、提供側のチームが必要な機能要件を提供することができない時に、利用者に追加オプションを提供するものです。 InnroSourceの成功には、 ホストチーム の プロダクトオーナー と Trusted Committer 、そして ゲストチーム の コントリビューター が関わります。 効果的に行うと、InnerSourceは両方の参加チームに多くの効果をもたらします。 効果的なInnerSource実施の主要な原則は、 自発的なコードコントリビューション と 優先的なメンターシップ です。</description></item><item><title>おわりに</title><link>http://anexample.org/ja/learn/learning-path/product-owner/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/product-owner/06/</guid><description>是非、 innersourcecommon.org まで連絡をいただき、オンラインでご参加ください。 私たちは、80以上の企業が参加するとてもアクティブなコミュニティです。 それらの多くは、Fortune 500の企業です。
他のビデオをまだ視聴されていなければ、是非ご覧ください。 そこには、InnerSourceのプロセスをあなたの会社に実装するために必要な最初のいくつかのステップが含まれています。 また、https://innersourcecommons.org/ja/learn/learning-path/trusted-committer[Trusted Committer] などの役割や、あなたの最初のコントリビューションの合意形成のような、いくつかの文書についても説明しています。
もしよろしければ、私の本をご覧ください。 innersourcecommons.org/checklist から入手してください。 この本の後ろの部分には、プロダクトオーナーの皆さんが実行すべきことがたくさんあります。 innersourcecommons.</description></item><item><title>コミュニティのニーズを提唱する</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/06/</guid><description>InnerSourceコミュニティは企業内に存在するため、オープンソースコミュニティより制約があります。 時には、コミュニティとビジネスユニットの利益が相反することがあります。 Trusted Committerは、プロジェクトに対する長期的な視点を持っています。 彼らは、健全なコミュニティが、健全なコードの前提条件であることを理解しています。 これが、多くのInnerSourceコミュニティが 「コードよりコミュニティ(Community over Code)」 をモットーとする Apache Way でモデル化された理由です。 一方でビジネスユニットは、当然ながら、InnerSourceコミュニティにより作成される製品により大きな関心をもちます。 彼らは、短期から中期の業績で利益がでることを好みます。</description></item><item><title>Trusted Committerになる</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/07/</guid><description>Trusted Committerの役割は、大変ですがやり甲斐のあるものです。 このラーニングパスに興味があるのであれば、実際にTrsuted Committerになる方法と、自分がそれに適した人物であるかを知りたいと思うかもしれません。
InnerSourceコミュニティは、オープンソースコミュニティと同じ原則に従っており、その一つに実力主義があります。 実力主義において、権力は才能、努力、成果に基づいて個人に与えられます。 つまり、Trusted Committerの役割に伴う権限と特権は、獲得する必要があるものだということです。 オープンソースのもう1つの価値である透明性は、才能、努力、成果をコミュニティ全体に見えるようにするという点でも重要な役割を果たしています。
正式にTrusted Committerになるプロセスは、コミュニティごとに異なり、InnerSourceの行路のどこにいるかに依り、時間とともに進化するかもしれません。 草の根コミュニティでは、創設者がTrusted Committerの役割を担うことが良くあります。 コミュニティが成長するにつれて、またはより大きなコミュニティでは、Trusted Committerは通常、コミュニティの コントリビューター から指名されたり投票されたりします。 しかし、Trusted Committerの役割は、成功のために多大な時間と献身を必要とするため、自発的に引き受けなければなりません。</description></item><item><title>おわりに</title><link>http://anexample.org/ja/learn/learning-path/trusted-committer/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://anexample.org/ja/learn/learning-path/trusted-committer/08/</guid><description>ここまでの節では、Trusted Committerの責任について学びました。 これらの責任には、製品の品質確保、コミュニティの健全性の維持、コントリビューションする際の障壁の低減、コミュニティのレベル向上、組織内でのそのニーズの主張などが含まれます。 また、Trusted Committerになる方法と、その役割を果たすために必要なことについても説明しました。 Trusted Committerとして働くことは大変ですが、最終的にはあなたの会社におけるコントリビューションの価値を増幅することになります。
Trusted Committerになるための道を歩むきっかけになればと思います。 また、InnerSourceのイニシアティブを成功させるために、有能なTrusted Committerがいることの重要性と、この役割に必要な権限レベルについて、組織が理解する助けになればと思います。
InnerSourceラーニングパスの他の記事や動画を見て、InnerSourceについて、さらに学んでみることをお勧めします。 そしてもちろん、 InnerSourceコモンズコミュニティ は、あなたをとても歓迎しています。</description></item></channel></rss>